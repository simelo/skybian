#!/bin/bash
# Crafted by Skycoin/Simelo team

## This script configures the Network Parameters for Skybian OS during boot
#	time using data stored in the [free space of the] bootloader or from a
#	default configuration file.

## The first 16MB (address 0x0-0x1000000) of the multimedia-card (MMC) is
#	reserved for the bootloader in 512 byte sectors that's blocks 0 to 32768.
#
#	Actual bootloader data is split on some regions in that 16MB space, but
#   there are withe spaces in there that we will use.
#
#   Network Paramaters are stored on the 12MB mark, exact address is 0xC00000
#   aka byte 12582912, but we use 256 byte block to reach it so it's on the 
#   block number 49152 with a maximum length of 256 bytes.
#
#	The following variables describe where to start looking for existing
#   Network Parameters, again in 256 bytes blocks
DATASTART=49152
DATASIZE=256

## Extract config from MMC; forward-to /etc/skybian.conf; else use default
function extract_config() {
	# Read one 256 byte block after skiping $DATASIZE blocks
	dd if=/dev/mmcblk0 of=/tmp/extracted bs=$DATASIZE count=1 skip=$DATASTART

	# Clean read data by printing strings of printable characters from output
	strings /tmp/extracted > /tmp/clean

	# If /tmp/clean contains strings: test fields in $section
	if [ -s /tmp/clean ] ; then
		local data=`cat /tmp/clean`
		local flag=""		# $flag is set if a field in $section is missing;
							#	set by the following loop:

		for section in IP GW DNS MODE MIP ; do
			local test=`cat $data | grep $section`

			# If a field in $section is missing a string...
			if [-z "$test" ] ; then
				flag="true"	# set the flag
				return
			fi
		done

		# If $flag is blank: data is good; copy/overwrite-system-default
		if [ -z "$flag" ] ; then
			cp -f /tmp/clean /etc/skybian.conf
		fi
	fi
}

# extract the data...
extract_config

## If Network Parameters are not found in bootloader: load default config from:
. /etc/skybian.conf

## Check if Network Parameters match existing configuration.
#	If detected parameters match configured: true
#	If network is not configured (or has different IP): false
function check_net() {
    local skynet=`nmcli con show | grep skynet`

	# If connection "skynet" exists:
    if [ -n "$skynet" ] ; then				# assign it's IP to:
        local skyip=$(nmcli con show skynet | grep IP4.ADDRESS | `
			`awk '{ print $2 }')

	    # Test if it matches $IP from extract_config()
        if [ "$skyip" == "$IP/24" ] ; then
            echo 1	# true
        else
            echo 0	# false
        fi
    else	# No "Skynet" connection
        echo 0		# false

        # Erase existing configuration in Network Manager for eth0 interface
        nmcli con delete "Wired connection 1" &> /dev/null
    fi
}

## Check if network configuration is ok:
NETOK=`check_net`
if [ "$NETOK" == "1" ] ; then
	echo "Network configuration ok."
else
	echo "Not configured or different; fixing..."

	# Force configuration removal in case it exists but doesn't match
	nmcli con delete skynet &> /dev/null

	# Setting up using parameters from extract_config()
	nmcli con add con-name skynet ifname eth0 type ethernet ip4 $IP/24 gw4 $GW
	nmcli con mod skynet ipv4.dns "$DNS"
fi

## Path to skywire config scripts
SKYWIRE_UNIX_SCRIPTS=/usr/local/skywire/go/src/github.com/skycoin/`
						`skywire/static/script

## Check for required environment variables
# If /etc/default/skywire doesn't exist: 
if [ ! -f /etc/default/skywire ] ; then
	# link it
	ln -s ${SKYWIRE_UNIX_SCRIPTS}/skywire.defaults /etc/default/skywire
else
	# If not a link: remove and create link
	if [ ! -h /etc/default/skywire ] ; then
		rm /etc/default/skywire
		ln -s ${SKYWIRE_UNIX_SCRIPTS}/skywire.defaults /etc/default/skywire
	fi
fi

## Modify skywire config to point to a skywire-manager
echo "Setting the manager IP"
cat /etc/default/skywire | grep -v "MANAGER_IP" | \
	sed s/"it system wide."/'it system wide.\n'"MANAGER_IP=$MIP"/ \
	> /tmp/skywire.default
cp -f /tmp/skywire.default $SKYWIRE_UNIX_SCRIPTS/skywire.defaults

## Enable and start systemd services based on node type
if [ "$MODE" == "manager" ] ; then
	echo "Starting as a Skywire-Manager node"
	systemctl enable skywire-manager
	systemctl stop skywire-node
	systemctl disable skywire-node
	# short pause
	sleep 2
	# start
	systemctl start skywire-manager
else
	echo "Starting as a Skywire-Minion node"
	systemctl enable skywire-node
	systemctl stop skywire-manager
	systemctl disable skywire-manager
	# short pause
	sleep 2
	# start
	systemctl start skywire-node
fi
